# Generated by Django 5.1.7 on 2025-03-23 16:01

import core.models.badge
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="BadgeClass",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        choices=[("v2", "V2"), ("v3", "V3")],
                        default="v2",
                        help_text="Version du standard OpenBadge utilisée",
                        max_length=2,
                        verbose_name="version",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nom du badge",
                        max_length=255,
                        validators=[django.core.validators.MinLengthValidator(2)],
                        verbose_name="nom",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        default="Achievement",
                        help_text="Type d'achievement (ex: Badge, Certificate, Diploma)",
                        max_length=100,
                        verbose_name="type",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description détaillée du badge et de ses critères d'obtention",
                        verbose_name="description",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        help_text="Image du badge",
                        upload_to="badges",
                        verbose_name="image",
                    ),
                ),
                (
                    "criteria_url",
                    models.URLField(
                        help_text="URL décrivant les critères d'obtention du badge",
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="critères",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        help_text="Catégorie du badge (ex: compétence, certification)",
                        max_length=100,
                        verbose_name="catégorie",
                    ),
                ),
                (
                    "skills",
                    models.TextField(
                        blank=True,
                        help_text="Liste des compétences validées par ce badge",
                        verbose_name="compétences",
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        blank=True,
                        help_text="Niveau de difficulté ou de maîtrise",
                        max_length=50,
                        verbose_name="niveau",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="mis à jour le"),
                ),
            ],
            options={
                "verbose_name": "classe de badge",
                "verbose_name_plural": "classes de badge",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="adresse email"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Peut se connecter à l'interface d'administration.",
                        verbose_name="staff",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Indique si ce compte est actif.",
                        verbose_name="actif",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="date d'inscription"
                    ),
                ),
                (
                    "email_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Indique si l'adresse email a été vérifiée.",
                        verbose_name="email vérifié",
                    ),
                ),
                (
                    "verification_token",
                    models.CharField(
                        blank=True,
                        help_text="Token pour la vérification d'email",
                        max_length=64,
                        verbose_name="token de vérification",
                    ),
                ),
                (
                    "verification_sent_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date du dernier envoi d'email de vérification",
                        null=True,
                        verbose_name="dernier email de vérification",
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        blank=True,
                        help_text="Nom affiché publiquement",
                        max_length=255,
                        verbose_name="nom affiché",
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True,
                        help_text="Courte biographie",
                        verbose_name="biographie",
                    ),
                ),
                (
                    "avatar_url",
                    models.URLField(
                        blank=True, help_text="URL de l'avatar", verbose_name="avatar"
                    ),
                ),
                (
                    "website",
                    models.URLField(
                        blank=True,
                        help_text="Site web personnel",
                        verbose_name="site web",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("af", "Afrikaans"),
                            ("ar", "Arabic"),
                            ("ar-dz", "Algerian Arabic"),
                            ("ast", "Asturian"),
                            ("az", "Azerbaijani"),
                            ("bg", "Bulgarian"),
                            ("be", "Belarusian"),
                            ("bn", "Bengali"),
                            ("br", "Breton"),
                            ("bs", "Bosnian"),
                            ("ca", "Catalan"),
                            ("ckb", "Central Kurdish (Sorani)"),
                            ("cs", "Czech"),
                            ("cy", "Welsh"),
                            ("da", "Danish"),
                            ("de", "German"),
                            ("dsb", "Lower Sorbian"),
                            ("el", "Greek"),
                            ("en", "English"),
                            ("en-au", "Australian English"),
                            ("en-gb", "British English"),
                            ("eo", "Esperanto"),
                            ("es", "Spanish"),
                            ("es-ar", "Argentinian Spanish"),
                            ("es-co", "Colombian Spanish"),
                            ("es-mx", "Mexican Spanish"),
                            ("es-ni", "Nicaraguan Spanish"),
                            ("es-ve", "Venezuelan Spanish"),
                            ("et", "Estonian"),
                            ("eu", "Basque"),
                            ("fa", "Persian"),
                            ("fi", "Finnish"),
                            ("fr", "French"),
                            ("fy", "Frisian"),
                            ("ga", "Irish"),
                            ("gd", "Scottish Gaelic"),
                            ("gl", "Galician"),
                            ("he", "Hebrew"),
                            ("hi", "Hindi"),
                            ("hr", "Croatian"),
                            ("hsb", "Upper Sorbian"),
                            ("hu", "Hungarian"),
                            ("hy", "Armenian"),
                            ("ia", "Interlingua"),
                            ("id", "Indonesian"),
                            ("ig", "Igbo"),
                            ("io", "Ido"),
                            ("is", "Icelandic"),
                            ("it", "Italian"),
                            ("ja", "Japanese"),
                            ("ka", "Georgian"),
                            ("kab", "Kabyle"),
                            ("kk", "Kazakh"),
                            ("km", "Khmer"),
                            ("kn", "Kannada"),
                            ("ko", "Korean"),
                            ("ky", "Kyrgyz"),
                            ("lb", "Luxembourgish"),
                            ("lt", "Lithuanian"),
                            ("lv", "Latvian"),
                            ("mk", "Macedonian"),
                            ("ml", "Malayalam"),
                            ("mn", "Mongolian"),
                            ("mr", "Marathi"),
                            ("ms", "Malay"),
                            ("my", "Burmese"),
                            ("nb", "Norwegian Bokmål"),
                            ("ne", "Nepali"),
                            ("nl", "Dutch"),
                            ("nn", "Norwegian Nynorsk"),
                            ("os", "Ossetic"),
                            ("pa", "Punjabi"),
                            ("pl", "Polish"),
                            ("pt", "Portuguese"),
                            ("pt-br", "Brazilian Portuguese"),
                            ("ro", "Romanian"),
                            ("ru", "Russian"),
                            ("sk", "Slovak"),
                            ("sl", "Slovenian"),
                            ("sq", "Albanian"),
                            ("sr", "Serbian"),
                            ("sr-latn", "Serbian Latin"),
                            ("sv", "Swedish"),
                            ("sw", "Swahili"),
                            ("ta", "Tamil"),
                            ("te", "Telugu"),
                            ("tg", "Tajik"),
                            ("th", "Thai"),
                            ("tk", "Turkmen"),
                            ("tr", "Turkish"),
                            ("tt", "Tatar"),
                            ("udm", "Udmurt"),
                            ("ug", "Uyghur"),
                            ("uk", "Ukrainian"),
                            ("ur", "Urdu"),
                            ("uz", "Uzbek"),
                            ("vi", "Vietnamese"),
                            ("zh-hans", "Simplified Chinese"),
                            ("zh-hant", "Traditional Chinese"),
                        ],
                        default="fr-fr",
                        help_text="Langue préférée",
                        max_length=10,
                        verbose_name="langue",
                    ),
                ),
                (
                    "email_notifications",
                    models.BooleanField(
                        default=True,
                        help_text="Recevoir des notifications par email",
                        verbose_name="notifications email",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "utilisateur",
                "verbose_name_plural": "utilisateurs",
            },
        ),
        migrations.CreateModel(
            name="Assertion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "issuance_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date d'attribution du badge",
                        verbose_name="date d'attribution",
                    ),
                ),
                (
                    "identifier",
                    models.URLField(
                        blank=True,
                        help_text="URL unique identifiant cette assertion",
                        unique=True,
                        verbose_name="identifiant",
                    ),
                ),
                (
                    "recipient_identifier",
                    models.CharField(
                        default="default@example.com",
                        help_text="Identifiant unique du destinataire (email, URL, etc.)",
                        max_length=255,
                        verbose_name="identifiant destinataire",
                    ),
                ),
                (
                    "issued_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date d'émission du badge",
                        verbose_name="date d'émission",
                    ),
                ),
                (
                    "evidence_url",
                    models.URLField(
                        blank=True,
                        help_text="URL des preuves justifiant l'obtention",
                        verbose_name="URL des preuves",
                    ),
                ),
                (
                    "narrative",
                    models.TextField(
                        blank=True,
                        help_text="Description détaillée des preuves",
                        verbose_name="description des preuves",
                    ),
                ),
                (
                    "expires",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date d'expiration du badge",
                        null=True,
                        verbose_name="date d'expiration",
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        choices=[("v2", "V2"), ("v3", "V3")],
                        default="v2",
                        help_text="Version du standard OpenBadge utilisée",
                        max_length=2,
                        verbose_name="version",
                    ),
                ),
                (
                    "credential_id",
                    models.URLField(
                        blank=True,
                        help_text="Identifiant unique du credential (v3)",
                        null=True,
                        unique=True,
                        verbose_name="identifiant",
                    ),
                ),
                (
                    "credential_type",
                    core.models.badge.JSONTextField(
                        blank=True,
                        help_text="Types du credential (v3: VerifiableCredential, OpenBadgeCredential)",
                        null=True,
                        verbose_name="types",
                    ),
                ),
                (
                    "evidence",
                    core.models.badge.JSONTextField(
                        blank=True,
                        help_text="Liste des preuves justifiant l'obtention du badge",
                        verbose_name="preuves",
                    ),
                ),
                (
                    "verification",
                    core.models.badge.JSONTextField(
                        blank=True,
                        help_text="Méthode de vérification de l'assertion",
                        verbose_name="vérification",
                    ),
                ),
                (
                    "signature",
                    models.TextField(
                        blank=True,
                        help_text="Signature cryptographique de l'assertion",
                        verbose_name="signature",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date d'expiration du badge",
                        null=True,
                        verbose_name="expire le",
                    ),
                ),
                (
                    "revoked",
                    models.BooleanField(
                        default=False,
                        help_text="Indique si le badge a été révoqué",
                        verbose_name="révoqué",
                    ),
                ),
                (
                    "revocation_reason",
                    models.TextField(
                        blank=True,
                        help_text="Raison de la révocation du badge",
                        verbose_name="raison de révocation",
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        help_text="Personne recevant le badge",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="badge_assertions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="destinataire",
                    ),
                ),
                (
                    "achievement",
                    models.ForeignKey(
                        help_text="Achievement obtenu",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assertions",
                        to="core.badgeclass",
                        verbose_name="achievement",
                    ),
                ),
                (
                    "badge_class",
                    models.ForeignKey(
                        help_text="Badge attribué (v2)",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="v2_assertions",
                        to="core.badgeclass",
                        verbose_name="badge",
                    ),
                ),
            ],
            options={
                "verbose_name": "assertion",
                "verbose_name_plural": "assertions",
                "ordering": ["-issuance_date"],
                "unique_together": {("badge_class", "recipient")},
            },
        ),
        migrations.CreateModel(
            name="Alignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "target_name",
                    models.CharField(
                        help_text="Nom du référentiel de compétences",
                        max_length=255,
                        verbose_name="référentiel",
                    ),
                ),
                (
                    "target_url",
                    models.URLField(
                        help_text="URL du référentiel",
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="URL",
                    ),
                ),
                (
                    "target_description",
                    models.TextField(
                        blank=True,
                        help_text="Description du référentiel",
                        verbose_name="description",
                    ),
                ),
                (
                    "target_framework",
                    models.CharField(
                        blank=True,
                        help_text="Nom du framework de compétences",
                        max_length=255,
                        verbose_name="framework",
                    ),
                ),
                (
                    "target_code",
                    models.CharField(
                        blank=True,
                        help_text="Code de la compétence dans le référentiel",
                        max_length=255,
                        verbose_name="code",
                    ),
                ),
                (
                    "badge_class",
                    models.ForeignKey(
                        help_text="Badge aligné avec le référentiel",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alignments",
                        to="core.badgeclass",
                        verbose_name="badge",
                    ),
                ),
            ],
            options={
                "verbose_name": "alignement",
                "verbose_name_plural": "alignements",
                "ordering": ["target_name"],
            },
        ),
        migrations.CreateModel(
            name="Issuer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        choices=[("v2", "V2"), ("v3", "V3")],
                        default="v2",
                        help_text="Version du standard OpenBadge utilisée",
                        max_length=2,
                        verbose_name="version",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nom de l'organisation émettrice",
                        max_length=255,
                        validators=[django.core.validators.MinLengthValidator(2)],
                        verbose_name="nom",
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        help_text="URL du site web de l'organisation",
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="site web",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Adresse email de contact de l'organisation",
                        max_length=254,
                        verbose_name="email de contact",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description détaillée de l'organisation",
                        verbose_name="description",
                    ),
                ),
                (
                    "image",
                    models.URLField(
                        help_text="URL du logo de l'organisation",
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="logo",
                    ),
                ),
                (
                    "public_key",
                    models.TextField(
                        blank=True,
                        help_text="Clé publique pour la vérification des badges signés",
                        verbose_name="clé publique",
                    ),
                ),
                (
                    "key_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("rsa", "RSA"),
                            ("ed25519", "ED25519"),
                            ("secp256k1", "SECP256K1"),
                        ],
                        help_text="Type d'algorithme de signature utilisé",
                        max_length=10,
                        verbose_name="type de clé",
                    ),
                ),
                (
                    "privacy_policy",
                    models.URLField(
                        blank=True,
                        help_text="URL de la politique de confidentialité",
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="politique de confidentialité",
                    ),
                ),
                (
                    "verification",
                    core.models.badge.JSONTextField(
                        blank=True,
                        help_text="Méthode de vérification des badges",
                        verbose_name="vérification",
                    ),
                ),
                (
                    "revocation_list",
                    models.URLField(
                        blank=True,
                        help_text="URL de la liste des badges révoqués",
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="liste de révocation",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="mis à jour le"),
                ),
                (
                    "members",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Utilisateurs membres de cet émetteur",
                        related_name="joined_issuers",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="membres",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="Utilisateur propriétaire de cet émetteur",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="owned_issuers",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="propriétaire",
                    ),
                ),
            ],
            options={
                "verbose_name": "émetteur",
                "verbose_name_plural": "émetteurs",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Endorsement",
            fields=[
                (
                    "id",
                    models.CharField(
                        help_text="Identifiant unique de l'endorsement",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                        verbose_name="identifiant",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("badge_class", "Badge"),
                            ("issuer", "Émetteur"),
                            ("assertion", "Assertion"),
                        ],
                        help_text="Type d'élément endorsé",
                        max_length=20,
                        verbose_name="type",
                    ),
                ),
                (
                    "claim",
                    core.models.badge.JSONTextField(
                        help_text="Déclaration faite par l'endorser à propos de l'élément endorsé",
                        verbose_name="claim",
                    ),
                ),
                (
                    "issued_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date d'émission de l'endorsement",
                        verbose_name="date d'émission",
                    ),
                ),
                (
                    "verification",
                    core.models.badge.JSONTextField(
                        blank=True,
                        help_text="Méthode de vérification de l'endorsement",
                        verbose_name="vérification",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="mis à jour le"),
                ),
                (
                    "assertion",
                    models.ForeignKey(
                        blank=True,
                        help_text="Assertion endorsée",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="endorsements",
                        to="core.assertion",
                        verbose_name="assertion",
                    ),
                ),
                (
                    "badge_class",
                    models.ForeignKey(
                        blank=True,
                        help_text="Badge endorsé",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="endorsements",
                        to="core.badgeclass",
                        verbose_name="badge",
                    ),
                ),
                (
                    "endorser",
                    models.ForeignKey(
                        help_text="Utilisateur qui fait l'endorsement",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="given_endorsements",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="endorser",
                    ),
                ),
                (
                    "issuer",
                    models.ForeignKey(
                        blank=True,
                        help_text="Émetteur endorsé",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="endorsements",
                        to="core.issuer",
                        verbose_name="émetteur",
                    ),
                ),
            ],
            options={
                "verbose_name": "endorsement",
                "verbose_name_plural": "endorsements",
                "ordering": ["-issued_on"],
            },
        ),
        migrations.AddField(
            model_name="badgeclass",
            name="issuer",
            field=models.ForeignKey(
                help_text="Organisation qui émet ce badge",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="badge_classes",
                to="core.issuer",
                verbose_name="émetteur",
            ),
        ),
    ]
